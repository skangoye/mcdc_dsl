/*
 * generated by Xtext
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.mcdc.MCDC_Module
import org.xtext.mcdc.MCDC_Statement
import org.xtext.moduleDsl.IF_STATEMENT
import org.xtext.moduleDsl.MODULE_DECL

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class ModuleDslGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(e: resource.allContents.toIterable.filter(typeof(MODULE_DECL))){
			val moduleName = e.name
			fsa.generateFile( moduleName + ".txt", e.compile)
		}
	}//doGenerate
	
	def compile (MODULE_DECL module){
		val mcdc = new MCDC_Module()
		val solutionsAndCoverage = mcdc.mcdcOfModule(module)
		val solutions = solutionsAndCoverage.first
		val coveragereport = solutionsAndCoverage.second
		
		'''
		
				MC/DC TESTS DATA FOR MODULE «module.name» 
				
			« var i = 0»
			«FOR dataList: solutions»
				/***********************************************************************************************/
			
				  Test data «i = i + 1» :
					
					«FOR variable: dataList»		
						«val flow = variable.first»
						«val name = variable.second»
						«val value = variable.third»	
						«IF flow == "in" ||  flow == "inout"»
							input: « name » => «value»
						«ENDIF»					
						«IF flow == "out"»
							expected: « name » => «value»
						«ENDIF»	
					
					«ENDFOR»
				/***********************************************************************************************/
			«ENDFOR»
			
				COVERAGE REPORT FOR THE MODULE «module.name» 
			
				«coveragereport»
			
		'''
	}
	
	def compile(IF_STATEMENT instr){
		val mcdc = new MCDC_Statement
		mcdc.mcdcIfStatement(instr)
	}

}//ModuleDslGenerator
